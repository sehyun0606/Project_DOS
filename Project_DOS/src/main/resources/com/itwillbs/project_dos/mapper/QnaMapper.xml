<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.itwillbs.project_dos.mapper.QnaMapper">
 	<!-- 전체 게시물 목록 갯수 조회 - SELECT -->
	<!-- COUNT() 함수 활용 -->
	<select id="selectQnaListCount" resultType="int">
		SELECT COUNT(*)
		FROM question_board
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<!-- 1) 제목으로 검색했을 경우 -->
				<when test="searchType.equals('subject')">
					qna_title LIKE CONCAT('%', #{searchKeyword}, '%')
					
				</when>
				<!-- 2) 내용으로 검색했을 경우 -->
				<when test="searchType.equals('content')">
					qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 3) 제목&내용으로 검색했을 경우 -->
				<when test="searchType.equals('subject_content')">
					qna_title LIKE CONCAT('%', #{searchKeyword}, '%')
					OR qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 4) 작성자로 검색했을 경우 -->
				<when test="searchType.equals('writer')">
					member_id LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
			</choose>
		</if>
	</select>
	
	<!-- 게시물 목록 조회 - SELECT -->
	<!-- 정렬 : 참조글번호(board_re_ref) 기준 내림차순, 순서번호(board_re_seq) 기준 오름차순 -->
	<!-- LIMIT 절을 활용하여 조회할 게시물 갯수 제한(startRow 행부터 listLimit 만큼 조회) -->
	<select id="selectQnaList" resultType="question"> <!-- mybatis-config.xml 에서 alias 설정함 -->
		SELECT *
		FROM question_board
		<if test="!searchKeyword.equals('')">
			WHERE
			<choose>
				<!-- 1) 제목으로 검색했을 경우 -->
				<when test="searchType.equals('subject')">
					qna_title LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 2) 내용으로 검색했을 경우 -->
				<when test="searchType.equals('content')">
					qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 3) 제목&내용으로 검색했을 경우 -->
				<when test="searchType.equals('subject_content')">
					qna_title LIKE CONCAT('%', #{searchKeyword}, '%')
					OR qna_content LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 4) 작성자로 검색했을 경우 -->
				<when test="searchType.equals('writer')">
					member_id LIKE CONCAT('%', #{searchKeyword}, '%')
				</when>
				<!-- 
				5) 만약, searchType 값이 없거나 잘못된 값이 전달됐을 경우
				   searchKeyword 가 존재하면 무조건 WHERE 절이 추가되므로
				   WHERE 절을 무효화시키기 위해 항상 true 가 되는 조건식을 아무거나 추가
				-->
				<otherwise>
					1 = 1   -- 항상 true 가 되는 조건식
				</otherwise>
			</choose>
		</if>
		ORDER BY
			qna_num DESC
		LIMIT
			#{startRow}
			, #{listLimit}
	</select>
	
	<select id="selectFaq" resultType="faq"> <!-- mybatis-config.xml 에서 alias 설정함 -->
		SELECT *
		FROM faq
	</select>
	
	<!-- 게시물 등록 - INSERT -->
	<!-- 
	글번호(board_num) 컬럼이 일반 정수 컬럼이며 자동 증가 컬럼이 아니므로 직접 글번호 생성 필요
	이 때, 기존 게시물 번호 중 가장 큰 번호 조회 후 + 1 값을 새 글 번호와 참조글 번호로 사용
	=> 마이바티스의 INSERT, UPDATE 작업 과정(DELETE 제외)에서 
	   SELECT 구문 조회 결과값을 활용해야할 경우 <selectKey> 태그를 <insert> 등의 태그 내에서 사용하여
	   작업 전 또는 후에 특정 데이터 조회 수행 및 해당 값을 활용 가능
	   - keyProperty 속성 : 조회(SELECT) 결과 값을 저장할 속성명(VO 객체의 멤버변수명도 지정 가능)
	                        => 조회 후 자동으로 해당 객체의 변수(또는 일반 변수)에 결과값 저장됨
	                           ex) BoardVO 객체를 파라미터로 전달받았을 때 board_num 변수 지정 시
	                               해당 객체 내의 멤버변수 board_num 에 조회 결과값 저장됨
	   - resultType 속성 : 조회(SELECT) 결과에 대한 데이터타입(마이바티스에서 처리하는 타입)
	   - order 속성 : 작업 수행 시점(메인 작업 전 수행 시 BEFORE, 작업 후 수행 시 AFTER 선택)
	-->
	<insert id="insertQnaBoard">
		<!-- 기존 게시물들 중 가장 큰 글 번호(board_num) 조회 - SELECT -->
		<!-- 단, 첫 게시물일 경우 조회 결과가 없으므로 null 값이 조회됨 -->
		<!-- 따라서, 값 저장 과정에서 오류 발생하므로 null 값 대신 0 이 기본값이 되도록 처리 => IFNULL() 활용 -->
		<selectKey keyProperty="qna_num" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(qna_num), 0)
			FROM question_board;
		</selectKey>
		<!-- 
		BoardVO 객체내의 board_num 변수명과 keyProperty 에 지정된 이름이 같으므로 
		조회된 가장 큰 글번호값이 BoardVO 객체에 자동으로 저장된다!
		-->
		
		<!-- selectKey 를 통해 조회된 글번호 + 1 값을 새 글 번호와 참조글 번호 값으로 사용 -->
		<!-- 이 때, keyProperty 속성에 지정한 이름을 변수처럼 활용 -->
		INSERT
		INTO question_board
		VALUES (
			#{qna_num} + 1       -- 새 글 번호(조회된 가장 큰 글번호 값 + 1)
			, #{qna_type}
			, #{qna_title}
			, #{member_id}
			, #{qna_content}
			, 0
			, NOW()
			, 'N'
			, null
			, null
		)
	</insert>
	
	<select id="selectBoard" resultType="question">
		SELECT *
		FROM question_board
		WHERE qna_num = #{qna_num}
	</select>
	
	<update id="updateQnaBoard">
		UPDATE question_board
		SET 
			qna_title = #{qna_title}
			, qna_type = #{qna_type}
			, qna_content = #{qna_content}
			, qna_date = NOW()
		WHERE qna_num = #{qna_num}
	</update>
	
	
	
	
	
	
	
	
	
	
 </mapper>
 
 
 
 
 